/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import {
  IsString,
  MaxLength,
  IsEnum,
  IsDate,
  IsOptional,
  ValidateNested,
} from "class-validator";
import { EnumMessageType } from "./EnumMessageType";
import { EnumMessageStatus } from "./EnumMessageStatus";
import { Type } from "class-transformer";
import { Email } from "../../email/base/Email";

@ObjectType()
class Message {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  campaignId!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  campaignName!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  campaignContactId!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  campaignContactFirstName!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  campaignContactLastName!: string;

  @ApiProperty({
    required: true,
    enum: EnumMessageType,
  })
  @IsEnum(EnumMessageType)
  @Field(() => EnumMessageType, {
    nullable: true,
  })
  type?: "Email" | "SMS" | "WhatsApp" | "Voice";

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  templateId!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  templateName!: string;

  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @MaxLength(256)
  @Field(() => String)
  content!: string;

  @ApiProperty({
    required: true,
    enum: EnumMessageStatus,
  })
  @IsEnum(EnumMessageStatus)
  @Field(() => EnumMessageStatus, {
    nullable: true,
  })
  status?: "Pending" | "Sent" | "Delivered" | "Failed";

  @ApiProperty({
    required: false,
  })
  @IsDate()
  @Type(() => Date)
  @IsOptional()
  @Field(() => Date, {
    nullable: true,
  })
  scheduledAt!: Date | null;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    type: () => [Email],
  })
  @ValidateNested()
  @Type(() => Email)
  @IsOptional()
  messageEmails?: Array<Email>;
}

export { Message as Message };
